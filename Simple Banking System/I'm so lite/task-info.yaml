type: edu
custom_name: stage3
files:
- name: src/banking/Main.java
  visible: true
  text: "package banking;\n\nimport java.util.*;\n\npublic class Main {\n  public\
    \ static void main(String[] args) {\n    Scanner console = new Scanner(System.in);\n\
    \    Account account = new Account();\n\n    do {\n      System.out.println(\"\
    1. Create an account\");\n      System.out.println(\"2. Log into account\");\n\
    \      System.out.println(\"0. Exit\");\n      String choice = console.next();\n\
    \      if (\"1\".equals(choice)) {\n        account.createAccount();\n      }\
    \ else if (\"2\".equals(choice)) {\n        account.logIn();\n      } else if\
    \ (\"0\".equals(choice)) {\n        console.close();\n        exit();\n      }\n\
    \    } while(true);\n  }\n\n  public static void exit() {\n    System.out.println(\"\
    \\nBye!\");\n    System.exit(0);\n  }\n\n}\n\nclass Database {\n  private static\
    \ Map<String, Long> accounts = new HashMap<>();\n\n  public static void addAccount(String\
    \ pin, long cardNumber) {\n    accounts.put(pin, cardNumber);\n  }\n\n  public\
    \ Map<String, Long> getAccounts() {\n    return accounts;\n  }\n\n  public static\
    \ boolean isDuplicate(Long cardNumber) {\n    return !accounts.containsValue(cardNumber);\n\
    \  }\n\n  public static boolean isLoginValid(String pin, Long cardNumber) {\n\
    \    return (accounts.containsKey(pin) && accounts.get(pin).equals(cardNumber));\n\
    \  }\n}\n\n\nclass Card {\n  private static Random rand = new Random();\n  private\
    \ String pin;\n  private long cardNumber;\n  private double balance;\n\n  public\
    \ Card() {\n    this.pin = generatePIN();\n    this.cardNumber = generateCardNumber();\n\
    \    updateAccountsList(pin, cardNumber);\n    this.balance = 0;\n  }\n\nprivate\
    \ int checkSum(List<Integer> lst) {\n    int sum = 0;\n    List<Integer> check\
    \ = new ArrayList<Integer>(lst);\n    for (int i = 0; i < 15; i++) {\n      if\
    \ (i % 2 == 0) {\n        check.set(i, check.get(i) * 2);\n      }\n      if (check.get(i)\
    \ > 9) {\n        check.set(i, check.get(i) - 9);\n      }\n      sum += check.get(i);\n\
    \    }\n    int checksum = 10 - sum % 10;\n    if (checksum == 10) \n      checksum\
    \ = 0;\n    return checksum;\n  }\n\n  private long generateCardNumber() {\n \
    \   List<Integer> card = new ArrayList<Integer>();\n    card.add(4);\n    for\
    \ (int i = 0; i < 5; i++) {\n      card.add(0);\n    }\n    for (int i = 5; i\
    \ < 14; i++) {\n      card.add(rand.nextInt(10));\n    }\n    card.add(checkSum(card));\n\
    \    String cardNumber = \"\";\n    for (Integer number : card) {\n      cardNumber\
    \ += number;\n    }\n    if (!Database.isDuplicate(Long.parseLong(cardNumber)))\
    \ { // if card number already exists\n      return generateCardNumber();\n   \
    \ }\n    return Long.parseLong(cardNumber);\n  }\n\n\n  private String generatePIN()\
    \ {\n    String pin = \"\";\n    for (int i = 0; i < 4; i++) {\n      pin += rand.nextInt(10);\n\
    \    }\n    return pin;\n  }\n\n  private void updateAccountsList(String pin,\
    \ long cardNumber) {\n    Database.addAccount(pin, cardNumber);\n  }\n\n  public\
    \ double getBalance() {\n    return balance;\n  }\n\n  public String getPin()\
    \ {\n    return pin;\n  }\n\n  public long getCardNumber() {\n    return cardNumber;\n\
    \  }\n}\nclass Account {\n  private Scanner console = new Scanner(System.in);\n\
    \  private Card activeCard;\n  private List<Card> cards =  new ArrayList<>();\n\
    \n  protected void createAccount() {\n    Card card = new Card();\n    cards.add(card);\n\
    \    System.out.println(\"\\nYour card has been created\");\n    System.out.println(\"\
    Your card number:\");\n    System.out.println(card.getCardNumber());\n    System.out.println(\"\
    Your card PIN:\");\n    System.out.println(card.getPin());\n    System.out.println();\n\
    \  }\n\n  protected void logIn() {\n    System.out.println(\"\\nEnter your card\
    \ number:\");\n    Long cardNumber = Long.parseLong(console.next());\n    System.out.println(\"\
    Enter your PIN:\");\n    String pin = console.next();\n\n    if (!Database.isLoginValid(pin,\
    \ cardNumber)) {\n      System.out.println(\"\\nWrong card number or PIN!\\n\"\
    );\n    } else {\n      activeCard = cards.get(findCard(cardNumber));\n      System.out.println(\"\
    \\nYou have successfully logged in!\\n\");\n      boolean running = true;\n  \
    \    do {\n        System.out.println(\"1. Balance\");\n        System.out.println(\"\
    2. Log out\");\n        System.out.println(\"0. Exit\");\n        String choice\
    \ = console.next();\n        if (choice.equals(\"1\")) {\n          System.out.println(\"\
    \\nBalance: \" + activeCard.getBalance() + \"\\n\");\n        } else if (choice.equals(\"\
    2\")) {\n          System.out.println(\"\\nSuccessfully logged out!\\n\");\n \
    \         running = false;\n        } else if (choice.equals(\"0\")) {\n     \
    \     console.close();\n          Main.exit();\n        }\n      } while (running);\n\
    \    }\n  }\n\n  private int findCard(Long cardNumber) {\n    int index = -1;\n\
    \    for (Card card : cards) {\n      if (card.getCardNumber() == cardNumber)\
    \ {\n        index = cards.indexOf(card);\n      }\n    }\n    return index;\n\
    \  }\n}\n\n\n"
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {}
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {}
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/93/stages/517/implement#comment
status: Solved
record: 3
